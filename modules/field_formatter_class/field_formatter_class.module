<?php

/**
 * @file
 * Provide for custom classes on field formatters in the display.
 */
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_formatter_class_field_formatter_settings_summary_alter(&$summary, $context) {

  $setting = $context['formatter']->getThirdPartySetting('field_formatter_class', 'class');

  if (!empty($setting)) {
    $summary[] = t('Class: @class', array('@class' => Xss::filter($setting, array())));
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * Adds a 'class' textfield to all formatters.
 */
function field_formatter_class_field_formatter_third_party_settings_form(\Drupal\Core\Field\FormatterInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $view_mode, $form, $form_state) {

  $element['class'] = array(
    '#type' => 'textfield',
    '#title' => t('Field Formatter Class'),
    '#default_value' => $plugin->getThirdPartySetting('field_formatter_class', 'class'),
  );
  return $element;
}

/**
 * Implements hook_preprocess_HOOK() for field templates.
 *
 * Adds a custom class to the field's class attribute
 * according to the field formatter settings.
 */
function field_formatter_class_preprocess_field(&$variables) {

  // Get the formatter class setting.
  $entity      = $variables['element']['#object'];
  $field_name  = $variables['element']['#field_name'];
  $view_mode   = $variables['element']['#view_mode'];

  $render_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
  $field_display = $render_display->getComponent($field_name);

  // Add class for whole field.
  if (isset($field_display['third_party_settings']['field_formatter_class'])) {
    $variables['attributes']['class'][] = Html::escape($field_display['third_party_settings']['field_formatter_class']['class']);
  }
}
